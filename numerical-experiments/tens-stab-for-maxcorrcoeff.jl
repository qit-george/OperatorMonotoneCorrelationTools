using LinearAlgebra
using Test
using OperatorMonotoneCorrelationTools

println("This script is for investigating the numerical stability of the
function that computes the maximal correlation coefficient μ_{f}(ρAB) in this package.")
println("To do this, we use that for fGM, the value tensorizes, so we check how the 
value varies between the single copy and double copy case.")

function fGM(x)
    return sqrt(x)
end
f0 = 0
fpinf = 0 
#= 
function fLM(x)
    if x != 1 && x > 0
        return (x - 1) / log(x)
    elseif x == 1
        return 1
    else
        throw(ArgumentError("x cannot be negative"))
    end
end
f0 = 0
fpinf = 0 =#


println("the following test shows that the calculation is rather stable
for the qubit isotropic states")
@testset "Stability of qubit depolarizing channel and max mixed state" begin
    maxdev = 0
    for q = 0:0.1:1
        Ak, Bk = _depolkraus(q)

        σ = [1/2 0; 0 1/2]
        #σ = hsrandomstate(dA, dA, true)
        v1 = qmaxcorrcoeff(σ, Ak, Bk, fGM, f0, fpinf)

        σ2 = kron(σ, σ)

        Ak2, Bk2 = _parallelchan(Ak, Bk)

        v2 = qmaxcorrcoeff(σ2, Ak2, Bk2, fGM, f0, fpinf)

        dev = abs(v2 - v1)
        dev > maxdev ? maxdev = dev : nothing
    end
    @test maxdev < 1e-8
end

println("the following test shows that the calculation is unstable for states
generated by the purification of a random state and the qubit depolarizing channel being applied.")
@testset "Instability of qubit depolarizing channel and random state" begin
    maxdev = 0
    q = 0.7
    Ak, Bk = _depolkraus(q)

    σ = hsrandomstate(2, 2, true)
    v1 = qmaxcorrcoeff(σ, Ak, Bk, fGM, f0, fpinf)

    σ2 = kron(σ, σ)

    Ak2, Bk2 = _parallelchan(Ak, Bk)

    v2 = qmaxcorrcoeff(σ2, Ak2, Bk2, fGM, f0, fpinf)

    dev = abs(v2 - v1)
    dev > maxdev ? maxdev = dev : nothing
    println("The maximum deviation from tensorization: ", maxdev)
    @test maxdev > 1e-2
end