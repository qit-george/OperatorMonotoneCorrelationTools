using LinearAlgebra
using Test
using OperatorMonotoneCorrelationTools

println("This script is for investigating the numerical stability of the
function that computes the maximal correlation coefficient μ_{f}^{Lin}(ρAB) in this package.")
println("To do this, we use that for fGM, the value tensorizes, so we check how the 
value varies between the single copy and double copy case.")

k = 1/2

println("the following test shows that the calculation is rather stable
for the qubit isotropic states")
@testset "Stability of qubit depolarizing channel and max mixed state" begin
    maxdev = 0
    for k = 0:0.1:1
        for q = 0:0.1:1
            Ak, Bk = _depolkraus(q)

            σ = [1/2 0; 0 1/2]
            v1 = qmaxlincorrcoeff(σ, Ak, Bk, k)

            σ2 = kron(σ, σ)

            Ak2, Bk2 = _parallelchan(Ak, Bk)

            v2 = qmaxlincorrcoeff(σ2, Ak2, Bk2, k)

            dev = abs(v2 - v1)
            dev > maxdev ? maxdev = dev : nothing
        end
    end
    @test maxdev < 1e-8
end

println("the following test shows that the calculation is stable for states
generated by the purification of a real random state and the qubit depolarizing channel being applied.")
@testset "Stability of qubit depolarizing channel and random state" begin
    maxdev = 0
    dA = 2
    for k = 0:0.1:1
        for q = 0:0.1:1
            Ak, Bk = _depolkraus(q)

            σ = hsrandomstate(dA, dA, true)
            v1 = qmaxlincorrcoeff(σ, Ak, Bk, k)

            σ2 = kron(σ, σ)

            Ak2, Bk2 = _parallelchan(Ak, Bk)

            v2 = qmaxlincorrcoeff(σ2, Ak2, Bk2, k)

            dev = abs(v2 - v1)
            dev > maxdev ? maxdev = dev : nothing
        end
    end
    @test maxdev < 1e-8
end

println("the following test shows that the calculation is not stable for states
generated by a random real-entried channel and quantum state.")
@testset "Instability of qubit random channel state" begin
    maxdev = 0
    dA = 2
    dB = 2
    for q = 0:0.1:1
        choi = randomquantumchannel(dA,dA,true)
        Ak, Bk = choitokraus(choi,dA,dB)

        σ = hsrandomstate(dA, dA, true)
        v1 = qmaxlincorrcoeff(σ, Ak, Bk, k)

        σ2 = kron(σ, σ)

        Ak2, Bk2 = _parallelchan(Ak, Bk)

        v2 = qmaxlincorrcoeff(σ2, Ak2, Bk2, k)

        dev = abs(v2 - v1)
        println(dev)
        dev > maxdev ? maxdev = dev : nothing
    end
    @test maxdev > 1e-2
end